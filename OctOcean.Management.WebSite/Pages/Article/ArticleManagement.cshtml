@page
@model Article.ArticleManagementModel
@{
    ViewData["Title"] = "文章管理列表";
    //Layout = "~/_Layout.cshtml";
}
<form method="post" class="layui-form">

    @*<table lay-filter="amtable" id="amtable" lay-data="{url:'http://localhost:55730/ArticleDraft/Pagination',id:'amtable'}">
            <thead>
                <tr>
                    <th lay-data="{field:'sNumber', width:80}">序号</th>
                    <th lay-data="{field:'articleCategoryName'  }">文章类别</th>
                    <th lay-data="{field:'articleTitle' }">文章标题</th>
                    <th lay-data="{field:'articleKey',width:300 }">Guid</th>
                     @*<th lay-data="{field:'operate'}">操作</th>
        </tr>
        </thead>
        <tbody>

            @{
                int i = 0;
                foreach (var ad in Model.ArticleDrafts)
                {

                    <tr>
                        <td>@(++i)</td>
                        <td>@ad.ArticleCategory</td>
                        <td>@ad.ArticleTitle</td>
                        <td>@ad.ArticleKey</td>
                        <td>
                            <a target="_blank" asp-page="./ArticleEdit" asp-route-ArticleKey="@ad.ArticleKey" class="layui-btn layui-btn-xs layui-btn-normal">编辑</a>
                            <input type="submit" value="删除" asp-page-handler="delete" class="layui-btn layui-btn-xs layui-btn-danger"
                                   asp-route-id="@ad.ArticleKey" />
                        </td>
                    </tr>
                }
            }

        </tbody>
        </table>*@
    <div class="layui-container">
        <div class="layui-row">
            <div class="layui-col-md4">
                <div class="layui-form-item pane" style="margin:0;">
                    <label class="layui-form-label">筛选条件：</label>
                    <div class="layui-input-block" id="ddlStatuspanel">
                        <input type="radio" name="ddlStatus" lay-filter="ddlStatus" value="0" title="未删除" checked>
                        <input type="radio" name="ddlStatus" lay-filter="ddlStatus" value="1" title="已删除">
                        <input type="radio" name="ddlStatus" lay-filter="ddlStatus" value="2" title="全部">
                    </div>

                </div>
            </div>
            <div class="layui-col-md3">
                <div class="layui-form-item pane" style="margin:0;">
                    <label class="layui-form-label">文章分类：</label>
                    <div class="layui-input-block">

                        <select lay-filter="ddlArticleCategory" asp-items="Model.Base_ArticleCategoryddl" id="ddlArticleCategory">
                            <option value="">全部</option>
                        </select>
                    </div>

                </div>
            </div>

            <div class="layui-col-md3">
                <div class="layui-form-item pane" style="margin:0;">
                    <label class="layui-form-label">文章标签：</label>
                    <div class="layui-input-block">

                        <select lay-filter="ddlArticleTag" asp-items="Model.Base_ArticleTagddl" id="ddlArticleTag">
                            <option value="">全部</option>
                        </select>
                    </div>

                </div>
            </div>

        </div>
    </div>




    <div>

    </div>


    <table id="articletable" lay-filter="myarticletable"></table>


    <a asp-page="ArticleEdit" class="layui-btn layui-btn-sm layui-btn-add" target="_blank"><i class="layui-icon">&#xe608;</i>新增</a>
    <a class="layui-btn layui-btn-sm layui-btn-green" id="btnreload"> <i class="layui-icon">&#x1002;</i>重新加载数据</a>
</form>


@section bottomscripts{



    @*自定义列工具条*@
    <script type="text/html" id="articletoolbar">
        <a class="layui-btn layui-btn-xs layui-btn-normal" lay-event="detail"><i class="layui-icon">&#xe63c;</i>预览</a>

        {{# if(d.delStatus==1){ }}

        <a class="layui-btn layui-btn-xs layui-btn-green" lay-event="edit" target="_blank" href="/Article/ArticleEdit/{{d.articleKey}}"><i class="layui-icon">&#x1005;</i>还原</a>

        <a class="layui-btn layui-btn-del layui-btn-xs article-cd-del" lay-event="cddel"><i class="layui-icon">&#x1006;</i>擦除</a>

        {{# } else{ }}
        <a class="layui-btn layui-btn-xs layui-btn-warm" lay-event="pub"><i class="layui-icon">&#xe609;</i>发布</a>
        <a class="layui-btn layui-btn-xs layui-btn-edit" lay-event="edit" target="_blank" href="/Article/ArticleEdit/{{d.articleKey}}"><i class="layui-icon">&#xe642;</i>编辑</a>
        <a class="layui-btn layui-btn-xs layui-btn-del" lay-event="del"><i class="layui-icon">&#xe640;</i>删除</a>


        {{# }}}
    </script>

    @*自定义列模板*@
    <script type="text/html" id="publishstatusTpl">
        {{# if(d.pubDelStatus==0 && d.pubArticleKey)   {       if(d.needPublish){    }}
        @*需要重新发布*@
        <span title="等待重新发布" class="article-publish-cx"><i class="layui-icon">&#xe65f;</i><i class="layui-icon">&#xe609;</i></span>
        {{# }else{  }}
        <span title="已发布" class="article-publish-yes"><i class="layui-icon">&#xe618;</i></span>
        {{# }  }  else {  }}
        <span class="article-publish-no">未发布</span>
        {{# } }}






        @*可以在模板中使用 d.LAY_INDEX 获取序号：{ { d.LAY_INDEX } }*@

    </script>


    <script type="text/html" id="articleTagTpl">
        {{#
            var txt = '';
            var arr = d.articleTag.split(':');
            for (var index in arr) {
                if(arr[index]){
                    txt+='<span class="article-tag-span">'+tagjsondata[arr[index]]+'</span>';
                }
            }
        }}

        {{txt}}

    </script>





    <script>
        //获取TagName的值
        var tagjsondata =@Html.Raw(ViewData["TagJson"]);

        //使用方法渲染绑定table的数据
        var table = layui.table;

        //第一个实例
        var tablelns = table.render({
            elem: '#articletable'
            //, height: 315 //容器高度
            , url: '/ArticleDraft/Pagination' //数据接口
            , request: {
                pageName: 'PageIndex' //页码的参数名称，默认：page
                , limitName: 'PageSize' //每页数据量的参数名，默认：limit
            }
            //, response: {
            //    statusName: 'status' //数据状态的字段名称，默认：code
            //    , statusCode: 200 //成功的状态码，默认：0
            //    , msgName: 'hint' //状态信息的字段名称，默认：msg
            //    , countName: 'total' //数据总数的字段名称，默认：count
            //    , dataName: 'rows' //数据列表的字段名称，默认：data
            //}
            , method: 'get'
            , where: {
                ArticleCategoryCode: $('#ddlArticleCategory').val()
                , DelStatus: $("#ddlStatuspanel :radio:checked").val()
                , ArticleTag: $('#ddlArticleTag').val()
            }
            , page: true //开启分页
            , cols: [[ //表头
                { field: 'sNumber', title: '序号', width: 60, align: 'center', event: 'smallzclick' } //event:自定义单元格点击事件名，以便在 tool 事件中完成对该单元格的业务处理
                , { field: 'articleCategoryName', title: '分类', width: 70, sort: true }
                , { field: 'articleTitle', title: '文章标题', width: 300, sort: true }
                , { field: 'articleTag', title: '文章标签',  templet: '#articleTagTpl'}
                , { field: 'updateTimeF', title: '更新时间', width: 142, sort: true }
                , { field: 'pubArticleKey', title: '发布状态', width: 86, templet: '#publishstatusTpl' }
                , { title: '操作', width: 280, align: 'center', toolbar: '#articletoolbar' }
                //{ field: 'id', title: 'ID', width: 80, sort: true, fixed: 'left' }
                //, { field: 'username', title: '用户名', width: 80 }
                //, { field: 'sex', title: '性别', width: 80, sort: true }
                //, { field: 'city', title: '城市', width: 80 }
                //, { field: 'sign', title: '签名', width: 177 }
                //, { field: 'experience', title: '积分', width: 80, sort: true }
                //, { field: 'score', title: '评分', width: 80, sort: true }
                //, { field: 'classify', title: '职业', width: 80 }
                //, { field: 'wealth', title: '财富', width: 135, sort: true }
            ]]
            , limit: 10//每页显示的条数（默认：10）。值务必对应 limits 参数的选项。
            //, limits: [10, 20, 30, 40, 50, 60, 70, 80, 90]
            //无论是异步请求数据，还是直接赋值数据，都会触发该回调。你可以利用该回调做一些表格以外元素的渲染。
            , done: function (res, curr, count) {
                $('.article-cd-del').parents('tr').css('color', '#cccccc'); //设置已经删除过的数据样式
                //如果是异步请求数据方式，res即为你接口返回的信息。
                //如果是直接赋值的方式，res即为：{data: [], count: 99} data为当前页数据、count为数据总长度
                //console.log(res);

                ////得到当前页码
                //console.log(curr);

                ////得到数据总量
                //console.log(count);
            }
        });

        //监听工具条
        table.on('tool(myarticletable)', function (obj) { //注：tool是工具条事件名（相当于button的click一样），test是table原始容器的属性 lay-filter="对应的值"
            var data = obj.data; //获得当前行数据
            //console.log(data);
            var layEvent = obj.event; //获得 lay-event 对应的值（也可以是表头的 event 参数对应的值）
            //console.log(layEvent); //如果单击了序号那一列，将会显示smallzclick
            var tr = obj.tr; //获得当前行 tr 的DOM对象

            if (layEvent === 'detail') { //预览
                var href = '@ViewData["ArticlePreviewUrl"]/' + data.articleKey + "?t=p";
                layer.open({
                    type: 2
                    , title: false
                    , content: href
                    , area: ['1200px', "600px"]
                });

                //do somehing
            } else if (layEvent === 'del' || layEvent == "cddel") { //删除
                var cfmsg = layEvent === 'del' ? "系统将会更新该条记录的删除状态,可进行还原，您确定要继续操作吗？" : "系统将会彻底删除该条记录有关的所有信息，不可恢复，您确定要继续操作吗？";

                layer.confirm(cfmsg, { icon: 3, title: '提示' }, function (index) {



                    //向服务端发送删除指令
                    $.post('/ArticleDraft/Delete', {
                        "ArticleKey": data.articleKey

                    }, function (rd) {
                        if (rd.status == 1) {
                            obj.del(); //删除对应行（tr）的DOM结构，并更新缓存
                            layer.close(index); //关闭对话框


                        }
                        else {
                            layer.alert('操作失败，：' + rd.msg, { icon: 5 });

                        }

                    }, "json");





                });
            } else if (layEvent === 'edit') { //编辑
                //do something

                //同步更新缓存对应的值
                //obj.update({
                //    articleTitle: 'wwwww' //使用这种方法可以直接更新表格中的值
                //});
            }
            else if (layEvent == 'pub') { //发布操作
                var href = '@ViewData["ArticlePreviewUrl"]/' + data.articleKey + "?t=p";
                layer.open({
                    type: 2
                    , title: false
                    , content: href
                    , area: ['1200px', "600px"]
                    , btn: ['发布']
                    , btnAlign: 'c' //居中
                    , yes: function (index, layero) {
                        $.post('/ArticleDraft/Publish', {
                            ArticleKey: data.articleKey,
                            IsPublish: true
                        }, function (rd) {
                            if (rd.status == 2) {
                                //未提交数据
                                layer.alert('请先保存数据，才能够执行发布操作！', { icon: 5 });
                                return false;
                            }
                            else if (rd.status == 1) {
                                layer.alert('操作完成！', { icon: 1 });
                                layer.close(index); //如果设定了yes回调，需进行手工关闭
                                //自动重新加载数据
                                $('#btnreload').click();

                            }
                            else {
                                layer.alert('数据异常：' + rd.msg, { icon: 5 });
                                return false;
                            }


                        }, "json");
                    }
                });

            }
        });

        var tableReload = function (articleCategoryCode, delStatus, articleTag) {
            tablelns.reload({
                where: { //设定异步数据接口的额外参数，任意设
                    ArticleCategoryCode: articleCategoryCode// $('#ddlArticleCategory').val()
                    , DelStatus: delStatus// $("#ddlStatuspanel :radio:checked").val()
                    , ArticleTag: articleTag//$('#ddlArticleTag').val()
                }
                , page: {
                    curr: 1 //重新从第 1 页开始
                }
            });


        }



        //监听排序切换
        table.on('sort(myarticletable)', function (obj) { //注：tool是工具条事件名，test是table原始容器的属性 lay-filter="对应的值"
            //console.log(obj.field); //当前排序的字段名
            //console.log(obj.type); //当前排序类型：desc（降序）、asc（升序）、null（空对象，默认排序）
            //console.log(this); //当前排序的 th 对象

            //尽管我们的 table 自带排序功能，但并没有请求服务端。
            //有些时候，你可能需要根据当前排序的字段，重新向服务端发送请求，从而实现服务端排序，如：
            table.reload('articletable', {
                initSort: obj //记录初始排序，如果不设的话，将无法标记表头的排序状态。
                , where: { //请求参数（注意：这里面的参数可任意定义，并非下面固定的格式）
                    orderColumn: obj.field //排序字段
                    , orderType: obj.type //排序方式
                    , ArticleCategoryCode: $('#ddlArticleCategory').val()
                    , DelStatus: $("#ddlStatuspanel :radio:checked").val()
                    , ArticleTag: $('#ddlArticleTag').val()
                }
            });
        });

        //重新加载数据
        $('#btnreload').click(function () {
            tableReload($('#ddlArticleCategory').val(), $("#ddlStatuspanel :radio:checked").val(), $('#ddlArticleTag').val());
        });

        var form = layui.form;
        //监听下拉框
        form.on('select(ddlArticleCategory)', function (data) {
            //console.log(data.elem); //得到select原始DOM对象
            //console.log(data.value); //得到被选中的值
            //console.log(data.othis); //得到美化后的DOM对象
            tableReload(data.value, $("#ddlStatuspanel :radio:checked").val(), $('#ddlArticleTag').val());
        });
        form.on('select(ddlArticleTag)', function (data) {
            //console.log(data.elem); //得到select原始DOM对象
            //console.log(data.value); //得到被选中的值
            //console.log(data.othis); //得到美化后的DOM对象
            tableReload($('#ddlArticleCategory').val(), $("#ddlStatuspanel :radio:checked").val(), data.value);
        });


        //监听radio单选
        form.on('radio(ddlStatus)', function (data) {


            //console.log(data.elem); //得到radio原始DOM对象
            //console.log(data.value); //被点击的radio的value值
            tableReload($('#ddlArticleCategory').val(), data.value, $('#ddlArticleTag').val());
        });

                        //var table = layui.table;

                        ////执行渲染
                        //table.render({
                        //    elem: '#demo' //指定原始表格元素选择器（推荐id选择器）
                        //    , height: 315 //容器高度
                        //    , url:'/ArticleDraft/Pagination'
                        //    , cols: [{}] //设置表头
                        //    //,…… //更多参数参考右侧目录：基本参数选项
                        //});


                        //转换静态表格
                        //table.init('amtable', {
                        //    limit: 10 //注意：请务必确保 limit 参数（默认：10）是与你服务端限定的数据条数一致
                        //    , page: true  //支持所有基础参数
                        //});

    </script>
}




